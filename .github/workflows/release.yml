name: Release
on:
  push:
    tags:
      - "v*" # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  build:
    name: Build Binary for ${{ matrix.target }}
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          - x86_64-apple-darwin
          - aarch64-apple-darwin
          - x86_64-pc-windows-msvc
        # This expands the matrix variables for the target
        # https://docs.github.com/en/actions/using-jobs/using-a-matrix-for-your-jobs#expanding-or-adding-matrix-configurations
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-20.04
            name: x86_64-unknown-linux-gnu.tar.gz
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            name: x86_64-unknown-linux-musl.tar.gz
          - target: x86_64-apple-darwin
            os: macOS-latest
            name: x86_64-apple-darwin.tar.gz
          - target: aarch64-apple-darwin
            os: macOS-latest
            name: aarch64-apple-darwin.tar.gz
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: x86_64-pc-windows-msvc.zip
    runs-on: ${{ matrix.os }}
    env:
      RUST_BACKTRACE: full
      CARGO_INCREMENTAL: 0
      RUSTUP_MAX_RETRIES: 100
      CARGO_NET_RETRY: 100
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
      - name: Extract Tag
        id: tag
        run: echo "NAME=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT
      # This action will care about the caching of ~/.cargo and ./target
      - name: Setup Cache for Rust
        uses: Swatinem/rust-cache@v2
        with:
          # Github cache doesn't work with parallel access - first access wins
          prefix-key: "rust-${{ matrix.target }}"
      - name: Setup Rust for ${{ matrix.target }}
        uses: dtolnay/rust-toolchain@stable
        with:
          target: ${{ matrix.target }}
      - name: Install dependencies for musl build
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: sudo apt install -y musl-tools
      - name: Build Binary
        run: cargo build --release --target ${{ matrix.target }}
      - name: Archive Binary
        if: matrix.os != 'windows-latest'
        working-directory: target/${{ matrix.target }}/release/
        run: |
          strip mdbook-svgbob
          tar czvf ../../../mdbook-svgbob-${{ steps.tag.outputs.name }}-${{ matrix.name }} mdbook-svgbob
      - name: Archive Binary (windows)
        if: matrix.os == 'windows-latest'
        working-directory: target/${{ matrix.target }}/release/
        run: |
          strip mdbook-svgbob.exe
          7z a ../../../mdbook-svgbob-${{ steps.tag.outputs.name }}-${{ matrix.name }} mdbook-svgbob.exe
      - name: Upload Archive as Artifact
        uses: actions/upload-artifact@v3
        with:
          if-no-files-found: error
          name: mdbook-svgbob-${{ steps.tag.outputs.name }}-${{ matrix.name }}
          path: mdbook-svgbob-${{ steps.tag.outputs.name }}-${{ matrix.name }}

  release:
    needs: build
    name: Create Github Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Get Artifacts
        uses: actions/download-artifact@v3
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: mdbook-svgbob-*/mdbook-svgbob-*

  publish:
    name: Publish to crates.io
    needs: release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Publish crate
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: cargo publish
